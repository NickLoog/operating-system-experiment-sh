# Target triple for RISC-V 64-bit with GC extensions
TARGET      := riscv64gc-unknown-none-elf
# Build mode (debug or release)
MODE        := release
# Directory containing application source files (.rs)
APP_SRC_DIR := src/bin
# Output directory for compiled targets
TARGET_DIR  := target/$(TARGET)/$(MODE)
# Suffix for assembly files (if any)
ASM_SUFFIX  := .asm
# Suffix for Rust source files
RS_SUFFIX   := .rs
# Suffix for the final binary output files
BIN_SUFFIX  := .bin

# Automatically find all .rs files in the application source directory
# and derive the application names by removing the path and suffix.
APPS        := $(patsubst $(APP_SRC_DIR)/%.rs,%,$(wildcard $(APP_SRC_DIR)/*.rs))

# Default target: build all applications
.PHONY: all build clean

all: build

# Target to build all applications listed in APPS
# This implicitly depends on the user library (user_lib) because
# cargo build handles Rust dependencies. Explicit dependencies on source
# files help Make trigger rebuilds when those files change.
build: $(patsubst %, $(TARGET_DIR)/%$(BIN_SUFFIX), $(APPS))

# Rule to build a single application binary (.bin) from its source (.rs)
# Example: target/riscv64gc-unknown-none-elf/release/hello_world.bin
$(TARGET_DIR)/%$(BIN_SUFFIX): $(APP_SRC_DIR)/%.rs src/lib.rs src/console.rs src/syscall.rs src/linker.ld Cargo.toml Makefile
	@echo Building application: $*
	# Compile the specific binary ($*) using cargo build
	@cargo build --bin $* --release --target $(TARGET)
	# Use rust-objcopy to convert the ELF executable to a raw binary format
	# --strip-all removes symbols and headers not needed for raw execution
	@rust-objcopy --strip-all $(TARGET_DIR)/$* -O binary $@
	@echo Built $@

# Target to clean build artifacts
clean:
	@echo Cleaning user artifacts...
	# Use cargo clean to remove target directory generated by cargo
	@cargo clean
	# Optionally remove any stray .bin files if needed (cargo clean usually suffices)
	# @rm -f $(TARGET_DIR)/*$(BIN_SUFFIX)

# Note: Ensure rust-objcopy is installed (`cargo install cargo-binutils`
# and `rustup component add llvm-tools-preview`).
# This Makefile assumes it's run from the 'user' directory. If run from
# the project root, adjust paths or use `make -C user build`.